/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.digia.tcp;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiContext;
import org.appcelerator.titanium.util.Log;
import org.appcelerator.titanium.util.TiConfig;

import java.net.Socket;
import java.net.InetSocketAddress;
import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.io.OutputStreamWriter;
import java.io.InputStreamReader;

// This proxy can be created by calling Tcp.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule=TcpModule.class)
public class ExampleProxy extends KrollProxy
{
    // Standard Debugging variables
    private static final String LCAT = "ExampleProxy";
    private static final boolean DBG = TiConfig.LOGD;
    private Socket socket;
    private ReadThread thread;
	
    // Constructor
    public ExampleProxy(TiContext tiContext) {
	super(tiContext);
	this.socket = new Socket();
    }
    
    // Handle creation options
    @Override
	public void handleCreationDict(KrollDict options) {
	super.handleCreationDict(options);
	
	if (options.containsKey("message")) {
	    Log.d(LCAT, "example created with message: " + options.get("message"));
	}
    }


    public class ReadThread extends Thread {

	public ExampleProxy proxy;

	public ReadThread(ExampleProxy eProxy) {
	    this.proxy = eProxy;
	}

	public void run(){
	    try {
		this.proxy.read();
	    } catch (java.io.IOException e) {
	    	    Log.d(LCAT, "Error in thread run");
	
	    }
	}
    }

    @Kroll.method
    public void connect() {
	String hostName = this.getProperty("hostName").toString();
	int port = Integer.parseInt(this.getProperty("port").toString());
	try {
    	    Log.d(LCAT, "Connecting" + hostName);

	    this.socket.connect(new InetSocketAddress(hostName,port ));
    	    Log.d(LCAT, "Connected" + hostName);

	    thread = new ReadThread(this);
    	    Log.d(LCAT, "Starting thread" + hostName);
	    thread.start();
    	    Log.d(LCAT, "Thread started" + hostName);
	} catch(java.io.IOException e) {
    	    Log.d(LCAT, "Thread/Connect IO Exception "+ hostName);

	}
    }


    @Kroll.method
    public void write(String data) {
	try {
    	    Log.d(LCAT, "Writing data: " + data);
	    BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(this.socket.getOutputStream()));
	    bufferedWriter.write(data);
	    bufferedWriter.flush();
	} catch (java.io.IOException e) {
    	    Log.d(LCAT, "error writing data: " + data);
	    
	}
    }


    public String read() throws java.io.IOException {

	BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
	StringBuilder sb = new StringBuilder();
	String str;
	Log.d(LCAT, "Start reading");
	while ((str = bufferedReader.readLine()) != null)
	    {
    	       Log.d(LCAT, "Reading data: " + str);

		KrollDict dict = new KrollDict();
		dict.put("data",str);
		this.fireEvent("read",dict);
	    }
      
	Log.d(LCAT, "Stop reading");

	// close the reader, and return the results as a String
	bufferedReader.close();
	return "";
    }


  
    @Kroll.method
    public void close() throws java.io.IOException {
	    this.socket.close();
    }

	
    // Methods
    @Kroll.method
	public void printMessage(String message) {
	Log.d(LCAT, "printing message: " + message);
    }
}
